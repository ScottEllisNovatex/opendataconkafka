# Use a minimal distro as we are going to use docker anyway.
# We could run a Python kafka consumer on this instance so that we can capture the messages sent from OEL7 to the kafka instance
# Python is part of minimal anyway.

language: python

git:
  depth: false # We might not need anything from git at this level?
  
services:
  - docker

env:
  - BUILD_CONFIG=Release

dist: bionic

branches:
  only:
    - master

before_install:
  - echo "Testing Docker Hub credentials"
  
install:
  - export SRC_DIR=$(pwd)
  # Run the docker image and keep the returned container name for use in exec calls.
  # Run detatched, the volume command is -v hostdir:containerdir, -rm indicates cleanup on exit unnamed vols, 
  # -ti maintain a terminal, the docker image is oraclelinux:7.6
  - DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti library/oraclelinux:7.6)
  # Need -y option on everything so it does not wait for input!!
  - docker exec -i $DOCK sh -c '
        yum install -y oracle-softwarecollection-release-el7 &&
        /usr/bin/ol_yum_configure.sh &&
        yum repolist &&
        yum install -y scl-utils glibc-devel iso-codes redhat-rpm-config libmicrohttpd git make applydeltarpm &&
        yum install -y devtoolset-8-gcc-c++ &&
        source scl_source enable devtoolset-8 &&
        gcc --version &&
        g++ --version 
      '
  - docker exec -i $DOCK sh -c '
        cd /home &&
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm &&
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm &&
        rpm -i libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm &&
        rpm -i libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm &&
        curl -O http://public-yum.oracle.com/repo/OracleLinux/OL7/optional/developer/x86_64/getPackage/scl-utils-build-20130529-19.el7.x86_64.rpm &&
        rpm -i scl-utils-build-20130529-19.el7.x86_64.rpm &&
        curl -O https://public-yum.oracle.com/repo/OracleLinux/OL7/optional/latest/x86_64/getPackage/libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm &&
        rpm -i libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm 
      '
  - docker exec -i $DOCK sh -c '
        yum install -y cmake3-3.12.2 file &&
        ln -s /usr/bin/cmake3 /bin/cmake &&
        cmake --version 
      '
  - docker exec -i $DOCK sh -c '
        yum install -y rh-python36 rh-python36-python-devel &&
        source scl_source enable rh-python36 &&
        python --version 
        '
  - docker exec -i $DOCK sh -c '
        cd /home &&
        yum install -y libzstd &&
        source scl_source enable devtoolset-8 &&
        git clone --depth 1 https://github.com/edenhill/librdkafka librdkafka &&
        cd librdkafka &&
        ./configure --source-deps-only &&
        make &&
        make install &&
        cd ..
        '
        # Result is $DESTDIR/usr/local/lib/librdkafka++.so.1
  - docker exec -i $DOCK sh -c '
        cd /home &&
        source scl_source enable devtoolset-8 &&
        source scl_source enable rh-python36 &&
        git clone --depth 1 https://github.com/confluentinc/confluent-kafka-python confluent-kafka-python &&
        cd confluent-kafka-python &&
        python setup.py build &&
        cd .. 
        '
        # Result is  ...
  - docker exec -i $DOCK sh -c '
        cd /home &&
        source scl_source enable devtoolset-8 &&
        git clone -b develop https://github.com/ScottEllisNovatex/opendatacon.git odcsrc &&
        ls -l &&
        cd odcsrc &&
        mkdir build &&
        cd build &&
        cmake -DPYTHON_HOME=/opt/rh/rh-python36/root/usr -DFULL=ON -DCMAKE_INSTALL_PREFIX=/home/install  .. &&
        make -j3 &&
        make package &&
        make install &&
        pwd 
      '
  - export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
  - export STOP="docker stop $DOCK"
    
script:
  # Get a fulldir listing into a log file that we can look at later to find things!
  - docker exec -i $DOCK sh -c '
        ls -lR / > dirlisting.log &&
        /bin/cp -rf dirlisting.log /mnt/build/
        '
  - ls -la
  # Copy the two specific files for this test into the docker container
  - $RUN /bin/cp -rf /mnt/build/PyPortKafka.py /home/odcsrc/bin/PyPortKafka.py
  - $RUN /bin/cp -rf /mnt/build/opendatacon.conf /home/opendatacon.conf
  - docker exec -i $DOCK sh -c '
        source scl_source enable rh-python36 &&
        export PYTHON_HOME="/opt/rh/rh-python36/root/usr" &&
        cd /home/odcsrc/bin &&
        LD_LIBRARY_PATH=/usr/local/lib ./opendatacon -c "/home/opendatacon.conf"
        '
  - $STOP

deploy:
     
  # Upload testing log files and deploy packages for all develop builds. Searches recursively for all .log files.
  provider: releases
  api_key:
    secure:    15MT0ZY2lVjvl7cdz+h6RFVTIYpFHuMsNAoIwJwI4iLQdj9ybdq4t9VrqkMZ7THlhgoYXYJKbXmPJmmt8/s1x5tktkbhdu2AU3e0sOYluO8ciBUvBUt5Jak6DAZB6Anjvj/tQqJb5nldnAfZmgnK/5A1Qyn33GBpnb6j2W4hiINR88zPMNpk0q2MF2VKdcFDLgNgbwDgfwEKcWbuxNJ0/g6aJDfS6aSyqPnAX8S/fS0arJmdMwIiAiiVKLBtyD5L6PVhbeP+pPaFD+uEuB+hSyO2tTEl827J78Fe4PgWkmd6xuTkCcObvK90vOv+1sXHA+2mIUbpvceREtM6E2uiofTzhEvoNPd4MYbmk9EMbmofsjorM5807F/Lx3yT7bcn2SjFMbDT7KSvFXLFD2HPLURHKFQ7cveYU+4KofVNhR8jWSOgDYljIskLUrycaysKqs2LD+sgBL9j/9O8HZTJx0nG5juBuHZcKon775T097CDMJFu9GbEw808GDcmX85dZDg1xlldNZAtB1CBw+kYrsApqSv8QWeVSANsNpJf9IvdszQRaLjvalKohDLEA7M1QRcaDpjXzTMz3+bqEokjUgmbLSlzjxuWoMv5PfRZHXPJDBVPnECyoXbF8+b89xHQgLUnr598S3uZEWNB2BcSEky2qjoaUqeJQeeD/AUDY1Y=
  file_glob: true
  file: 
    - ./**/*.log
    - opendatacon-*.sh
  name: "opendatacon_draft ${TRAVIS_TAG}"
  skip_cleanup: true
  draft: true
  overwrite: true
  on:
    branch: develop
   

